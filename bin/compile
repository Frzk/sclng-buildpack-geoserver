#!/usr/bin/env bash

if [ -n "${BUILDPACK_DEBUG}" ]
then
    set -ex
fi

build_dir="${1}"
cache_dir="${2}"
env_dir="${3}"


#
# Uses the following environment variables:
#
#   - GEOSERVER_VERSION
#         Version of GeoServer to install.
#         Defaults to 2.21.1.
#
#   - GEOSERVER_CONFIG_SCRIPT
#         Path to the file containing the configuration script.
#         Defaults to `/app/configure-geoserver.sh`
#
#   - GEOSERVER_DATA_DIR
#         Path to the directory where GeoServer stores its config files.
#         Defaults to `/app/geoserver-data`
#
#   - JAVA_VERSION
#         Version of JRE to install and use.
#         Defaults to 17.
#
#   - JAVA_WEBAPP_RUNNER_VERSION
#         Version of webapp runner to install and use.
#         Defaults to 9.0.52.1.
#


geoserver_version="${GEOSERVER_VERSION:-2.21.1}"
geoserver_config_script="${GEOSERVER_CONFIG_SCRIPT:-/app/configure-geoserver.sh}"
geoserver_data_dir="${GEOSERVER_DATA_DIR:-/app/geoserver-data}"

config_script="${geoserver_config_script//\/app/$build_dir}"
data_dir="${geoserver_data_dir//\/app/$build_dir}"

java_version="${JAVA_VERSION:-17}"
webapp_runner_version="${JAVA_WEBAPP_RUNNER_VERSION:-9.0.52.1}"

printf -v geoserver_zip "%s/geoserver-%s.zip" "${cache_dir}" "${geoserver_version}"



# Retrieves GeoServer .war, either by fetching it from the cache or by
# downloading it.
#
# get_geoserver <version> <cached_file>
#
get_geoserver() {
    local version
    local cached
    local url
    local dl_url

    version="${1}"
    cached="${2}"

    if [ ! -f "${cached}" ]
    then
        echo "Downloading GeoServer ${version}"
        url="https://sourceforge.net/projects/geoserver/files/GeoServer/%s/geoserver-%s-war.zip"

        printf -v dl_url "${url}" "${version}" "${version}"

        curl --retry 3 --silent --location "${dl_url}" \
            --output "${cached}"
    else
        echo "Retrieving GeoServer ${version} from cache"
    fi
}

# Starts GeoServer locally so we can inject the configuration.
# Returns the pid of the process.
#
# Usage: run_geoserver <build_dir> <port>
#
run_geoserver() {
    local build_dir
    local port
    local opts

    build_dir="${1}"
    port="${2}"

    #FIXME:
    # opts="-Xmx384m -Xss512k -XX:+UseCompressedOops"
    # nohup java "${opts}" -jar ...

    # Starts the webserver in background (will be killed later)
    nohup java -jar "${build_dir}/webapp-runner.jar" \
        --port "${port}" \
        "${build_dir}/geoserver.war" \
        > out.log 2>&1 &

    echo ${!}
}


# Stops the process corresponding to the given PID.
#
# Usage: stop_geoserver <pid>
#
stop_geoserver() {
    local pid

    pid="${1}"

    kill -SIGTERM ${pid}

    sleep 30

    if ps -p ${pid} > /dev/null
    then
        kill -SIGKILL ${pid}
    fi
}


# Installs Java and webapp_runner
#
# Usage: install_jre <build_dir> <java_version> <webapp_runner_version>
#
install_jre() {
    local base_url
    local jvm_url
    local runner_url
    local runner_pkg

    local build_dir
    local jre_version
    local runner_version

    build_dir="${1}"
    jre_version="${2}"
    runner_version="${3}"

    base_url="https://buildpacks-repository.s3.eu-central-1.amazonaws.com/%s"

    printf -v runner_pkg "webapp-runner-%s.jar" "${runner_version}"

    printf -v jvm_url "${base_url}" "jvm-common.tar.xz"
    printf -v runner_url "${base_url}" "${runner_pkg}"

    mkdir -p /tmp/jvm-common

    curl --retry 3 --silent --location "${jvm_url}" \
        | tar xJm -C /tmp/jvm-common --strip-components=1

    # Source utilities and functions:
    source /tmp/jvm-common/bin/util
    source /tmp/jvm-common/bin/java

    echo "java.runtime.version=${jre_version}" \
        > "${build_dir}/system.properties"

    install_java_with_overlay "${build_dir}"

    # Install Webapp Runner
    curl --retry 3 --silent --location "${runner_url}" \
        --output "${build_dir}/webapp-runner.jar"
}



echo "Installing JRE ${java_version}"
install_jre "${build_dir}" "${java_version}" "${webapp_runner_version}" \
    || {
        echo "Unable to install JRE. Aborting.";
        exit 1;
    }


get_geoserver "${geoserver_version}" "${geoserver_zip}"


unzip -qq -o "${geoserver_zip}" \
    -d "${cache_dir}/geoserver-${geoserver_version}"


# Move geoserver.war to $build_dir:
mv "${cache_dir}/geoserver-${geoserver_version}/geoserver.war" \
    "${build_dir}/geoserver-${geoserver_version}.war"

# Link versioned file:
pushd "${build_dir}" > /dev/null \
    && ln -sfn "geoserver-${geoserver_version}.war" "geoserver.war" \
    && popd > /dev/null

# Make sure GeoServer data directory exists:
mkdir -p "${data_dir}"

if [ -f "${config_script}" ]
then
    temp_port=4231

    # Modify environment var since we are in the BUILD phase
    # Otherwise data put in `GEOSERVER_DATA_DIR` would be lost when the
    # container is put in production (`/app` will be overridden).
    export GEOSERVER_DATA_DIR="${data_dir}"

    echo "Starting temporary GeoServer"
    geoserver_pid=$( run_geoserver "${build_dir}" "${temp_port}" )

    if [ ! -z ${geoserver_pid} ]
    then
        # echo "Listening on 4231, pid is ${geoserver_pid}"

        sleep 10

        curl --retry 10 --silent "http://localhost:${temp_port}" \
            && {
                echo "Importing configuration";
                source "${config_script}";

                echo "Stopping temporary GeoServer";
                stop_geoserver "${geoserver_pid}";
            } \
            || {
                echo "Unable to reach temporary GeoServer. Aborting.";
                exit 1;
            }
    else
        echo "Unable to start temporary GeoServer. Aborting."
    fi

    # Sets `GEOSERVER_DATA_DIR` back to its initial value.
    export GEOSERVER_DATA_DIR="${geoserver_data_dir}"
fi



# Cleanup:
echo "Cleaning up"
rm -Rf "${cache_dir}/geoserver-${geoserver_version}"

exit 0
